1. Database Object: TABLE, VIEW, SEQUENCE, INDEX, CONSTRAINT, SYNONYM, USER, ROLE
2. Schema
3. Naming rules, Namespace
4. DESC - describle
5. CREATE, ALTER (MODIFY, ADD)
6. Data types; CHAR, VARCHAR2(n), NUMBER, DATE, LOBs
7. CONSTRAINT: NOT NULL, UNIQUE, PRIMARY KEY, FOREIGN KEY, CHECK

8. DML: INSERT, UPDATE, DELETE, SELECT
9. TCL: COMMIT, ROLLBACK, SAVEPOINT
10. INSERT INTO table_name (list of colums) VALUES (list of values in order)
11. UPDATE table_name SET col = value, ... (WHERE ...)
12. DELETE (FROM) table_name (WHERE ...)
13. COMMIT (WORK)
14. ROLLBACK / ROLLBACK (WORK) TO point_name
15. SAVEPOINT point_name

16. SELECT col_1, col_2 FROM table_name;
17. Projection: Column; Selection: Row; Joining: Relation.
18. DISTINCT / UNIQUE
19. Psudo colums: ROWNUM(number output), ROWID(physical address)
20. * asterisk
21. Schema object: Table (data storage), View (saved select), Index, Sequence(counter, PK), Synonym(alias)

22. WHERE: IN, LIKE(_, %)
23. BETWEEN AND; IN ( , , )
24. IS NULL, IS NOT NULL; Never = NULL!; NULL(highest)
26. ORDER BY: by name, by position; ASC, DESC
27. Alias: COL_NAME " alias name"; COL_NAME AS ALIAS_NAME

28. Group functions: ingore NULL - COUNT, SUM, MAX, MIN, AVG, MEDIAN
29. GROUP BY, HAVING

30. FROM .. (INNER) JOIN .. ON
31. FROM .. LEFT / RIGHT / FULL (OUTER) JOIN .. ON
32. equijoins VS non-equijoins
33. table alias
34. FROM .. NATURAL JOIN .. = INNER JOIN, no table prefix
35. FROM .. USING() = inner / outer join
36. self join; multitable join
37. Cartesian Join: FROM without join condition, NumOfRow1*NumOfRow2

38. Subquery: single column, multiply column, scalar, correlated
39. EXIST, NOT EXIST: semijoin
40. WITH: name subquery

41. CREATE (OR REPLACE) VIEW vw_name AS table_name;
42. Cannot do DML on View with 1) omitting required colum 2) GROUP BY 3)DISTINCT 4) join
43. ALTER VIEW vw_name COMPILE;
44. CREATE SEQUENCE deq_name START WITH 1 INCREMENT BY 1 NOCYCLE;
45. SEQUENCE.NEXTVAL(first get call), CURRVAL
46. CREATE INDEX ix_name ON table_name(col1, col2,..);
47. CREATE UNIQUE INDEX ..
48. DROP INDEX ix_name; -- drop automaticlly after its table dropped
49. CREATE (OR REPLACE) (PUBLIC) SYNONYM alias FOR object_name; --No ALTER but OR REPLACE
50. DROP (PUBLIC) SYNONYM alias;

51. ALTER TABLE tab ADD (col_name datatype (DEFAULT value) ((CONSTRAINT cst_name) constraint) );
52. ALTER TABLE tab MODIFY (col_name modification); order - datatype, DEFAULT, CONSTRAINT.
53. ALTER TABLE tab RENAME COLUMN old TO new;
54. ALTER TABLE tab DROP COLUMN col; ALTER TABLE tab DROP (col1, col2, ..);
55. ALTER TABLE tab SET UNSED COLUMN col; ALTER TABLE tab SET UNUSED (col1, col2, ..); ALTER TABLE tab DROP UNUSED COLUMNS;
56. ALTER TABLE tab ADD / MODIFY (CONSTRAINT cst) constraint;
57. NOT NULL only MODIFY; ALTER TABLE tab MODIFY col NULL;
58. ALTER TABLE tab DROP PRIMARY KEY (CASCADE) (KEEP INDEX);
59. ALTER TABLE tab DISABLE (NOVALIDATE) constraint expression;
60. ALTER TABLE tab RENAME CONSTRAINT old TO new;
61. DROP TABLE tab CASCADE CONSTRAINTS;
62. USING INDEX only for PRIMARY KEY and UNIQUE;
63. PURGE TABLE tab;
64. FLASHBACK TABLE tab TO BEFORE DROP (RENAME TO new);
65. FLASHBACK TABLE tab TO SCN / TIMESTAMP / RESTORE POINT expression; <- CREATE / ALTER TABLE tab .. ENABLE ROW MOVEMENT;
66. CREATE / DROP RESTORE POINT pt;
67. CREATE (OR REPLACE) DIRECTORY dir_name AS dir_ref;

68. UNION, UNION ALL, INTERSECT, MINUS(first - second)
69. ORDER BY in set operators query, by position or by name refering first select query column name.

70. GROUP BY ROLLUP / CUBE / GROUPING SETS(..); cannot use alias in select list
71. GROUPING(one grouped column) - return NUMBER: 1 for superaggregate, 0 for regular row
72. GROUPING SETS use NULL to display a grand total
